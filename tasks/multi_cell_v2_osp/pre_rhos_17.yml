- name: download the cirros image for instance deployment post_tasks
  get_url:
        url: http://download.cirros-cloud.net/0.5.2/cirros-0.5.2-x86_64-disk.img
        dest: /home/stack

- name: create cell1 directory
  file:
        path: /home/stack/cell1
        state: directory

- name: Generate a role file
  shell: |
        source ~/stackrc
        set -o pipefail
        openstack overcloud roles generate --roles-path /usr/share/openstack-tripleo-heat-templates/roles -o /home/stack/cell1/cell_roles_data.yaml Compute CellController

- name: export cell-input.yaml
  shell: |
        source ~/stackrc
        set -o pipefail
        openstack overcloud cell export --control-plane-stack {{ test.overcloud.stack }} -f --output-file /home/stack/cell1/cell-input.yaml --working-dir /home/stack/overcloud-deploy/overcloud/

- name: copy cell1 baremetal deploy template
  template:
        src: templates/rhos_17/baremetal_deployment.yaml.j2
        dest: /home/stack/cell1-baremetal-deployed.yaml

- name: Determine available controllers to use as cell controller
  shell: |
        source ~/stackrc
        openstack baremetal node list -c Name -f value -c 'Provisioning State' -f value | grep available | grep control | head -1 | cut -d ' ' -f 1 | wc -l
  register: controller_count

- name: Convert Compute role to Controller
  block:
  - name: Get Compute UUID
    shell: "source ~/stackrc; openstack baremetal node list -c Name -f value -c 'Instance UUID' -f value -c UUID -f value | grep None | head -1 | cut -d ' ' -f 1"
    register: compute_node_uuid

  - name: Get Controller UUID
    shell: "source ~/stackrc; openstack baremetal node list -c Name -f value -c 'Instance UUID' -f value -c UUID -f value | grep controller | head -1 | cut -d ' ' -f 1"
    register: controller_node_uuid

  - name: Get Controller capabilites;
    shell: "source ~/stackrc; openstack baremetal node show {{ controller_node_uuid.stdout }} -c properties -f json | jq -r '.properties.capabilities'"
    register: controller_properties

  - name: Unset Compute properties
    shell: "source ~/stackrc; openstack baremetal node unset --property capabilities {{ compute_node_uuid.stdout }}"

  - name: Set compute properties with controller properties
    shell: "source ~/stackrc; openstack baremetal node set --property capabilities={{ controller_properties.stdout }} {{ compute_node_uuid.stdout }}"
  when: controller_count.stdout | int == 0

- name: Provision the Cell1 ("baremetal") nodes
  shell: |
      source ~/stackrc
      set -o pipefail
      openstack overcloud node provision \
      --network-config --stack cell1 \
      -o /home/stack/templates/cell1-baremetal-deployed.yaml  /home/stack/cell1-baremetal-deployed.yaml | \
      tee -a /home/stack/cell1_provision_nodes.log

- name: Create Cell1 nets
  shell: |
      source ~/stackrc
      set -o pipefail
      openstack overcloud network provision /home/stack/{{ test.deployment.files }}/network/network_data_v2.yaml -o /home/stack/templates/cell1-networks-deployed.yaml 2>&1 | \
      tee -a /home/stack/cell1_provision_01_net.log

- name: Reserve VIPs for Cell1
  shell: |
      source ~/stackrc
      set -o pipefail
      openstack overcloud network vip provision --stack cell1 /home/stack/{{ test.deployment.files }}/network/vip_data.yaml -o /home/stack/templates/cell1-vip-deployed.yaml 2>&1 | \
      tee -a /home/stack/cell1_provision_02_vip.log

- name: Generate cell1.yaml
  block:
  - name: Get cloud names path
    shell: |
        grep cloud-names.yaml /home/stack/overcloud_deploy.sh | awk '{print $2}'
    register: cloud_name_path

  - name: Get Redis vip IP
    shell: |
        grep -i redis /home/stack/{{ test.deployment.files }}/public_vip.yaml | grep -Eo '([0-9]*\.){3}[0-9]*'
    register: redis_vip_ip

  - name: set Redis VIP
    set_fact:
      redis_vip: "{{ redis_vip_ip.stdout }}"

  - name: Gather cloud domain suffix
    shell: |
        grep CloudDomain {{ cloud_name_path.stdout }} | awk '{print $2}'
    register: cloud_domain_shell
    when: cloud_name_path.stdout != "" | default(False)

  - name: Set cloud domain suffix
    set_fact:
      cloud_domain_suffix: "{{ cloud_domain_shell.stdout | default('ooo.test')}}"

  - name: copy the cell1.yaml environment file
    template:
          src: templates/rhos_17/cell1.yaml.j2
          dest: /home/stack/cell1/cell1.yaml

- name: copy the post_tasks script
  template:
        src: templates/rhos_17/post_tasks.sh
        dest: /home/stack/cell1/post_tasks.sh
        mode: '0755'

- name: copy overcloud deploy script to create deploy script for multi cell deployment
  copy:
        src: /home/stack/overcloud_deploy.sh
        dest: /home/stack/overcloud_cell_deployment.sh
        remote_src: yes

- name: create overcloud deploy command including the cell env files
  include: ../common/append_env_to_script.yml
  loop_control:
        loop_var: confchange
  with_items:
        - step: "Add additional cell Deployment"
          script: "~/overcloud_cell_deployment.sh"
          environment_file:
            - "/home/stack/cell1/cell1.yaml"
            - "/home/stack/cell1/cell-input.yaml"
          role_file:
            - "/home/stack/cell1/cell_roles_data.yaml"

- name: change the stack name
  replace:
        path: /home/stack/overcloud_cell_deployment.sh
        regexp: "--stack {{ test.overcloud.stack }}"
        replace: '--stack cell1'

- name: Update vip deployed path
  replace:
        path: /home/stack/overcloud_cell_deployment.sh
        regexp: '-e /home/stack/templates/overcloud-vip-deployed.yaml'
        replace: '-e /home/stack/templates/cell1-vip-deployed.yaml'

- name: Update networks deployed path
  replace:
        path: /home/stack/overcloud_cell_deployment.sh
        regexp: '-e /home/stack/templates/overcloud-networks-deployed.yaml'
        replace: '-e /home/stack/templates/cell1-networks-deployed.yaml'

- name: Change baremetal deployed path
  replace:
        path: /home/stack/overcloud_cell_deployment.sh
        regexp: '-e /home/stack/templates/overcloud-baremetal-deployed.yaml'
        replace: '-e /home/stack/templates/cell1-baremetal-deployed.yaml'

- name: Remove cloud names yaml if present
  ansible.builtin.lineinfile:
    path: /home/stack/overcloud_cell_deployment.sh
    state: absent
    regexp: 'cloud-names'

- name: Remove public vip yaml if present
  ansible.builtin.lineinfile:
    path: /home/stack/overcloud_cell_deployment.sh
    state: absent
    regexp: 'public_vip'

- name: Append log-file invocation line to cell1 deploy script
  lineinfile:
      dest: "/home/stack/overcloud_cell_deployment.sh"
      regexp: "^--log-file .*"
      line: "--log-file cell1_deployment_{{ 100 | random }}.log"

